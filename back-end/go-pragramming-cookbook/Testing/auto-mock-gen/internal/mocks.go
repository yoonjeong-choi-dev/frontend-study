// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package internal is a generated GoMock package.
package internal

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGetSetter is a mock of GetSetter interface.
type MockGetSetter struct {
	ctrl     *gomock.Controller
	recorder *MockGetSetterMockRecorder
}

// MockGetSetterMockRecorder is the mock recorder for MockGetSetter.
type MockGetSetterMockRecorder struct {
	mock *MockGetSetter
}

// NewMockGetSetter creates a new mock instance.
func NewMockGetSetter(ctrl *gomock.Controller) *MockGetSetter {
	mock := &MockGetSetter{ctrl: ctrl}
	mock.recorder = &MockGetSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetSetter) EXPECT() *MockGetSetterMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockGetSetter) Get(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockGetSetterMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGetSetter)(nil).Get), key)
}

// Set mocks base method.
func (m *MockGetSetter) Set(key, val string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, val)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockGetSetterMockRecorder) Set(key, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockGetSetter)(nil).Set), key, val)
}
