// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: repos.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Repos_GetRepos_FullMethodName    = "/Repos/GetRepos"
	Repos_CreateBuild_FullMethodName = "/Repos/CreateBuild"
	Repos_CreateRepos_FullMethodName = "/Repos/CreateRepos"
)

// ReposClient is the client API for Repos service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReposClient interface {
	// server-side stream
	GetRepos(ctx context.Context, in *RepoGetRequest, opts ...grpc.CallOption) (Repos_GetReposClient, error)
	// Exercise 9.1
	CreateBuild(ctx context.Context, in *Repository, opts ...grpc.CallOption) (Repos_CreateBuildClient, error)
	// client-side stream
	CreateRepos(ctx context.Context, opts ...grpc.CallOption) (Repos_CreateReposClient, error)
}

type reposClient struct {
	cc grpc.ClientConnInterface
}

func NewReposClient(cc grpc.ClientConnInterface) ReposClient {
	return &reposClient{cc}
}

func (c *reposClient) GetRepos(ctx context.Context, in *RepoGetRequest, opts ...grpc.CallOption) (Repos_GetReposClient, error) {
	stream, err := c.cc.NewStream(ctx, &Repos_ServiceDesc.Streams[0], Repos_GetRepos_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &reposGetReposClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Repos_GetReposClient interface {
	Recv() (*RepoGetResponse, error)
	grpc.ClientStream
}

type reposGetReposClient struct {
	grpc.ClientStream
}

func (x *reposGetReposClient) Recv() (*RepoGetResponse, error) {
	m := new(RepoGetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *reposClient) CreateBuild(ctx context.Context, in *Repository, opts ...grpc.CallOption) (Repos_CreateBuildClient, error) {
	stream, err := c.cc.NewStream(ctx, &Repos_ServiceDesc.Streams[1], Repos_CreateBuild_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &reposCreateBuildClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Repos_CreateBuildClient interface {
	Recv() (*RepoBuildLog, error)
	grpc.ClientStream
}

type reposCreateBuildClient struct {
	grpc.ClientStream
}

func (x *reposCreateBuildClient) Recv() (*RepoBuildLog, error) {
	m := new(RepoBuildLog)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *reposClient) CreateRepos(ctx context.Context, opts ...grpc.CallOption) (Repos_CreateReposClient, error) {
	stream, err := c.cc.NewStream(ctx, &Repos_ServiceDesc.Streams[2], Repos_CreateRepos_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &reposCreateReposClient{stream}
	return x, nil
}

type Repos_CreateReposClient interface {
	Send(*RepoCreateRequest) error
	CloseAndRecv() (*RepoCreateResponse, error)
	grpc.ClientStream
}

type reposCreateReposClient struct {
	grpc.ClientStream
}

func (x *reposCreateReposClient) Send(m *RepoCreateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *reposCreateReposClient) CloseAndRecv() (*RepoCreateResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RepoCreateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ReposServer is the server API for Repos service.
// All implementations must embed UnimplementedReposServer
// for forward compatibility
type ReposServer interface {
	// server-side stream
	GetRepos(*RepoGetRequest, Repos_GetReposServer) error
	// Exercise 9.1
	CreateBuild(*Repository, Repos_CreateBuildServer) error
	// client-side stream
	CreateRepos(Repos_CreateReposServer) error
	mustEmbedUnimplementedReposServer()
}

// UnimplementedReposServer must be embedded to have forward compatible implementations.
type UnimplementedReposServer struct {
}

func (UnimplementedReposServer) GetRepos(*RepoGetRequest, Repos_GetReposServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRepos not implemented")
}
func (UnimplementedReposServer) CreateBuild(*Repository, Repos_CreateBuildServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateBuild not implemented")
}
func (UnimplementedReposServer) CreateRepos(Repos_CreateReposServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateRepos not implemented")
}
func (UnimplementedReposServer) mustEmbedUnimplementedReposServer() {}

// UnsafeReposServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReposServer will
// result in compilation errors.
type UnsafeReposServer interface {
	mustEmbedUnimplementedReposServer()
}

func RegisterReposServer(s grpc.ServiceRegistrar, srv ReposServer) {
	s.RegisterService(&Repos_ServiceDesc, srv)
}

func _Repos_GetRepos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RepoGetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReposServer).GetRepos(m, &reposGetReposServer{stream})
}

type Repos_GetReposServer interface {
	Send(*RepoGetResponse) error
	grpc.ServerStream
}

type reposGetReposServer struct {
	grpc.ServerStream
}

func (x *reposGetReposServer) Send(m *RepoGetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Repos_CreateBuild_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Repository)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReposServer).CreateBuild(m, &reposCreateBuildServer{stream})
}

type Repos_CreateBuildServer interface {
	Send(*RepoBuildLog) error
	grpc.ServerStream
}

type reposCreateBuildServer struct {
	grpc.ServerStream
}

func (x *reposCreateBuildServer) Send(m *RepoBuildLog) error {
	return x.ServerStream.SendMsg(m)
}

func _Repos_CreateRepos_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReposServer).CreateRepos(&reposCreateReposServer{stream})
}

type Repos_CreateReposServer interface {
	SendAndClose(*RepoCreateResponse) error
	Recv() (*RepoCreateRequest, error)
	grpc.ServerStream
}

type reposCreateReposServer struct {
	grpc.ServerStream
}

func (x *reposCreateReposServer) SendAndClose(m *RepoCreateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *reposCreateReposServer) Recv() (*RepoCreateRequest, error) {
	m := new(RepoCreateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Repos_ServiceDesc is the grpc.ServiceDesc for Repos service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Repos_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Repos",
	HandlerType: (*ReposServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRepos",
			Handler:       _Repos_GetRepos_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CreateBuild",
			Handler:       _Repos_CreateBuild_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CreateRepos",
			Handler:       _Repos_CreateRepos_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "repos.proto",
}
